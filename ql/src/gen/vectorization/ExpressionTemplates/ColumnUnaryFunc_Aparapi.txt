/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
package org.apache.hadoop.hive.ql.exec.vector.expressions.gen;

import org.apache.hadoop.hive.ql.exec.vector.expressions.VectorExpression;
import org.apache.hadoop.hive.ql.exec.vector.expressions.MathExpr;
import org.apache.hadoop.hive.ql.exec.vector.*;
import org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;
import org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;

import com.amd.aparapi.Kernel;
import static java.lang.Math.<FuncName>;

/**
 * Generated from template ColumnUnaryFunc_Aparapi.txt, which covers binary arithmetic 
 * expressions between columns.
 */
public class <ClassName> extends VectorExpression {
  private static final long serialVersionUID = 1L;

  private int colNum;
  private int outputColumn;
  private static MyKernel kernel = new MyKernel();

  public <ClassName>(int colNum, int outputColumn) {
    this();
    this.colNum = colNum;
    this.outputColumn = outputColumn;
  }
  
  public <ClassName>() {
    super();
  }
    private static class MyKernel extends Kernel {
    	private <OperandType>[] vector;
    	private <ReturnType>[] outputVector;
    	private boolean[] selectedNoNulls;
    	private boolean[] inputIsNull;
    	private boolean[] outputIsNull;
    	private int[] sel;
    	
    	public MyKernel() {
			super();
			setExplicit(true);
		}

    	public MyKernel setVector(<OperandType>[] val) {
    		this.vector = val;
    		return this;
    	}

    	public MyKernel setOutputVector(<ReturnType>[] val) {
    		this.outputVector = val;
    		return this;
    	}

		public MyKernel setSelectedNoNulls(boolean[] val) {
			this.selectedNoNulls = val;
			return this;
		}

    	public MyKernel setInputIsNull(boolean[] val) {
    		this.inputIsNull = val;
    		return this;
    	}

    	public MyKernel setOutputIsNull(boolean[] val) {
    		this.outputIsNull = val;
    		return this;
    	}

		public MyKernel setSel(int[] val) {
			this.sel = val;
			return this;
		}
		
		@Override
    	public void run() {
    		int j = getGlobalId();
    		if(selectedNoNulls[1]) {
    			if(selectedNoNulls[0]) {
    				int i = sel[j];
          			outputVector[i] = <ResultCast> <FuncName>(<OperandCast> vector[i]);;
    			}
    			else {
    				outputVector[j] = <ResultCast> <FuncName>(<OperandCast> vector[j]);;
    			}
    		}
    		else {
    			if(selectedNoNulls[0]) {
					int i = sel[j];
          			outputVector[i] = <ResultCast> <FuncName>(<OperandCast> vector[i]);
          			outputIsNull[i] = inputIsNull[i];
    			}
    			else {
    				outputVector[j] = <ResultCast> <FuncName>(<OperandCast> vector[j]);
    				outputIsNull[j] = inputIsNull[j];
    			}
    		}
    	}
    } // end class MyKernel
    
    private static void executeOnDevice(MyKernel kernel, <OperandType>[] vector, <ReturnType>[] outputVector, boolean[] selectedNoNulls, boolean[] inputIsNull, boolean[] outputIsNull, int[] sel) {
    	//System.out.println("Execution mode: " + kernel.getExecutionMode());
        //long t1_g = System.currentTimeMillis();
        // send parameters and execute, copy the OpenCL-hosted array back to RAM
        kernel.setVector(vector).setOutputVector(outputVector).setSelectedNoNulls(selectedNoNulls).setInputIsNull(inputIsNull).setOutputIsNull(outputIsNull).setSel(sel);
        kernel.put(vector).put(outputVector).put(selectedNoNulls).put(inputIsNull).put(outputIsNull).put(sel);
        int kernelRange = vector.length;
        kernel.execute(kernelRange).get(outputVector);
		//long t2_g = System.currentTimeMillis();
		//System.out.println("Device " + kernel.getExecutionMode() + " time diff: " + (t2_g-t1_g) + " ms");
    }

  @Override
  public void evaluate(VectorizedRowBatch batch) {

    if (childExpressions != null) {
      this.evaluateChildren(batch);
    }

    <InputColumnVectorType> inputColVector = (<InputColumnVectorType>) batch.cols[colNum];
    <OutputColumnVectorType> outputColVector = (<OutputColumnVectorType>) batch.cols[outputColumn];
    int[] sel = batch.selected;
    boolean[] inputIsNull = inputColVector.isNull;
    boolean[] outputIsNull = outputColVector.isNull;
    outputColVector.noNulls = inputColVector.noNulls;
    int n = batch.size;
    <OperandType>[] vector = inputColVector.vector;
    <ReturnType>[] outputVector = outputColVector.vector;
    
    // return immediately if batch is empty
    if (n == 0) {
      return;
    }

	boolean[] selectedNoNulls = new boolean[] { batch.selectedInUse, inputColVector.noNulls };
    if (inputColVector.isRepeating) {
      //All must be selected otherwise size would be zero
      //Repeating property will not change.
      outputVector[0] = <ResultCast> <FuncName>(<OperandCast> vector[0]);
      // Even if there are no nulls, we always copy over entry 0. Simplifies code.
      outputIsNull[0] = inputIsNull[0]; 
      outputColVector.isRepeating = true;
    } else {
    	executeOnDevice(kernel, vector, outputVector, selectedNoNulls, inputIsNull, outputIsNull, sel);
    	outputColVector.isRepeating = false;
    } 
    <Cleanup>
  }

  @Override
  public int getOutputColumn() {
    return outputColumn;
  }
  
  @Override
  public String getOutputType() {
    return "<ReturnType>";
  }
  
  public int getColNum() {
    return colNum;
  }

  public void setColNum(int colNum) {
    this.colNum = colNum;
  }

  public void setOutputColumn(int outputColumn) {
    this.outputColumn = outputColumn;
  }

  @Override
  public VectorExpressionDescriptor.Descriptor getDescriptor() {
    return (new VectorExpressionDescriptor.Builder())
        .setMode(
            VectorExpressionDescriptor.Mode.PROJECTION)
        .setNumArguments(1)
        .setArgumentTypes(
            VectorExpressionDescriptor.ArgumentType.getType("<VectorExprArgType>"))
        .setInputExpressionTypes(
            VectorExpressionDescriptor.InputExpressionType.COLUMN).build();
  }
}
