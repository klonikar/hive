/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
package org.apache.hadoop.hive.ql.exec.vector.expressions.gen;

import org.apache.hadoop.hive.ql.exec.vector.expressions.VectorExpression;
import org.apache.hadoop.hive.ql.exec.vector.expressions.NullUtil;
import org.apache.hadoop.hive.ql.exec.vector.*;
import org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;
import org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;

import com.amd.aparapi.Kernel;

/**
 * Generated from template ColumnArithmeticColumn.txt, which covers binary arithmetic 
 * expressions between columns.
 */
public class <ClassName> extends VectorExpression {

  private static final long serialVersionUID = 1L;
  
  private int colNum1;
  private int colNum2;
  private int outputColumn;
  private static MyKernel kernel = new MyKernel();

  public <ClassName>(int colNum1, int colNum2, int outputColumn) {
    this.colNum1 = colNum1;
    this.colNum2 = colNum2;
    this.outputColumn = outputColumn;
  }

  public <ClassName>() {
  }

    private static class MyKernel extends Kernel {
    	private <OperandType1>[] vector1;
    	private <OperandType2>[] vector2;
    	private <ReturnType>[] outputVector;
    	private boolean[] selectedRepeating;
    	private int[] sel;
    	
    	public MyKernel() {
			super();
		}

    	public MyKernel setVector1(<OperandType1>[] val) {
    		this.vector1 = val;
    		return this;
    	}

    	public MyKernel setVector2(<OperandType2>[] val) {
    		this.vector2 = val;
    		return this;
    	}

    	public MyKernel setOutputVector(<ReturnType>[] val) {
    		this.outputVector = val;
    		return this;
    	}

		public MyKernel setSelectedRepeating(boolean[] val) {
			this.selectedRepeating = val;
			return this;
		}
		
		public MyKernel setSel(int[] val) {
			this.sel = val;
			return this;
		}
		
		@Override
    	public void run() {
    		int j = getGlobalId();
    		if(selectedRepeating[1]) {
    			if(selectedRepeating[0]) {
    				int i = sel[j];
          			outputVector[i] = vector1[0] <OperatorSymbol> vector2[i];
    			}
    			else {
    				outputVector[j] = vector1[0] <OperatorSymbol> vector2[j];
    			}
    		}
    		else if(selectedRepeating[2]) {
    			if(selectedRepeating[0]) {
		            int i = sel[j];
		            outputVector[i] = vector1[i] <OperatorSymbol> vector2[0];
    			}
    			else {
    				outputVector[j] = vector1[j] <OperatorSymbol> vector2[0];
    			}
    		}
    		else {
    			if(selectedRepeating[0]) {
		            int i = sel[j];
		            outputVector[i] = vector1[i] <OperatorSymbol> vector2[i];
    			}
    			else {
    				outputVector[j] = vector1[j] <OperatorSymbol>  vector2[j];
    			}
    		}
    	}
    } // end class MyKernel
    
    private static void executeOnDevice(MyKernel kernel, <OperandType1>[] vector1, <OperandType2>[] vector2, <ReturnType>[] outputVector, boolean[] selectedRepeating, int[] sel) {
    	//System.out.println("Execution mode: " + kernel.getExecutionMode());
        //long t1_g = System.currentTimeMillis();
        // send parameters and execute, copy the OpenCL-hosted array back to RAM
        kernel.setVector1(vector1).setVector2(vector2).setOutputVector(outputVector).setSelectedRepeating(selectedRepeating).setSel(sel);
        kernel.put(vector1).put(vector2).put(outputVector).put(selectedRepeating).put(sel);
        int kernelRange = vector1.length;
        if(selectedRepeating[1])
        	kernelRange = vector2.length;
        kernel.execute(kernelRange).get(outputVector);
		//long t2_g = System.currentTimeMillis();
		//System.out.println("Device " + kernel.getExecutionMode() + " time diff: " + (t2_g-t1_g) + " ms");
    }

  @Override
  public void evaluate(VectorizedRowBatch batch) {

    if (childExpressions != null) {
      super.evaluateChildren(batch);
    }

    <InputColumnVectorType1> inputColVector1 = (<InputColumnVectorType1>) batch.cols[colNum1];
    <InputColumnVectorType2> inputColVector2 = (<InputColumnVectorType2>) batch.cols[colNum2];
    <OutputColumnVectorType> outputColVector = (<OutputColumnVectorType>) batch.cols[outputColumn];
    int[] sel = batch.selected;
    int n = batch.size;
    <OperandType1>[] vector1 = inputColVector1.vector;
    <OperandType2>[] vector2 = inputColVector2.vector;
    <ReturnType>[] outputVector = outputColVector.vector;
    
    // return immediately if batch is empty
    if (n == 0) {
      return;
    }
    
    outputColVector.isRepeating = 
         inputColVector1.isRepeating && inputColVector2.isRepeating
      || inputColVector1.isRepeating && !inputColVector1.noNulls && inputColVector1.isNull[0]
      || inputColVector2.isRepeating && !inputColVector2.noNulls && inputColVector2.isNull[0];
    
    // Handle nulls first  
    NullUtil.propagateNullsColCol(
      inputColVector1, inputColVector2, outputColVector, sel, n, batch.selectedInUse);
          
    /* Disregard nulls for processing. In other words,
     * the arithmetic operation is performed even if one or 
     * more inputs are null. This is to improve speed by avoiding
     * conditional checks in the inner loop.
     */ 
    boolean[] selectedRepeating = new boolean[] { batch.selectedInUse, inputColVector1.isRepeating, inputColVector2.isRepeating };
    if (inputColVector1.isRepeating && inputColVector2.isRepeating) { 
      outputVector[0] = vector1[0] <OperatorSymbol> vector2[0];
    } else {
    	executeOnDevice(kernel, vector1, vector2, outputVector, selectedRepeating, sel);
    } 
    
    /* For the case when the output can have null values, follow 
     * the convention that the data values must be 1 for long and 
     * NaN for double. This is to prevent possible later zero-divide errors
     * in complex arithmetic expressions like col2 / (col1 - 1)
     * in the case when some col1 entries are null.
     */
    NullUtil.setNullDataEntries<CamelReturnType>(outputColVector, batch.selectedInUse, sel, n);
  }

  @Override
  public int getOutputColumn() {
    return outputColumn;
  }

  @Override
  public String getOutputType() {
    return "<ReturnType>";
  }
  
  public int getColNum1() {
    return colNum1;
  }

  public void setColNum1(int colNum1) {
    this.colNum1 = colNum1;
  }

  public int getColNum2() {
    return colNum2;
  }

  public void setColNum2(int colNum2) {
    this.colNum2 = colNum2;
  }

  public void setOutputColumn(int outputColumn) {
    this.outputColumn = outputColumn;
  }
  
  @Override
  public VectorExpressionDescriptor.Descriptor getDescriptor() {
    return (new VectorExpressionDescriptor.Builder())
        .setMode(
            VectorExpressionDescriptor.Mode.PROJECTION)
        .setNumArguments(2)
        .setArgumentTypes(
            VectorExpressionDescriptor.ArgumentType.getType("<OperandType1>"),
            VectorExpressionDescriptor.ArgumentType.getType("<OperandType2>"))
        .setInputExpressionTypes(
            VectorExpressionDescriptor.InputExpressionType.COLUMN,
            VectorExpressionDescriptor.InputExpressionType.COLUMN).build();
  }
}
